@startuml
interface MatchPrimitives {
    +id: string
}
class Match {
    -id: string
    +toPrimitives(): MatchPrimitives
    +{static} fromPrimitives(match: MatchPrimitives): Match
}
class MatchesContainer {
    -matches: Match[]
    +add(match: Match): void
    +toPrimitives(): MatchPrimitives[]
    +{static} fromPrimitives(matches: MatchPrimitives[]): MatchesContainer
}
interface ProfilePrimitives {
    +name: string
    +age: number
    +gender: string
}
class UnderAgeError extends Error
class Profile {
    -name: string
    -age: number
    -gender: string
    +getId(): string
    +getName(): string
    +getAge(): number
    +getGender(): string
    +equals(profile: Profile): boolean
    +toPrimitives(): ProfilePrimitives
    +updateWithPrimitives(profilePrimitives: ProfilePrimitives): void
    +{static} fromPrimitives(primitives: ProfilePrimitives): Profile
}
enum SwipeDirection {
    Left
    Right
}
interface SwipePrimitives {
    +to: string
    +direction: SwipeDirection
}
class Swipe {
    -direction: SwipeDirection
    -to: string
    +isRight(): boolean
    +equals(swipe: Swipe): boolean
    +getTo(): string
    +canLike(profile: Profile): boolean
    +toPrimitives(): SwipePrimitives
    +{static} fromPrimitives(swipe: SwipePrimitives): Swipe
}
class SwipesContainer {
    -swipes: Swipe[]
    +in(swipe: Swipe): boolean
    +add(direction: SwipeDirection, candidate: Profile): void
    +toPrimitives(): SwipePrimitives[]
    +{static} fromPrimitives(swipes: SwipePrimitives[]): SwipesContainer
}
interface UserPrimitives {
    +id: string
    +profile: ProfilePrimitives
    +swipes: SwipePrimitives[]
    +matches: MatchPrimitives[]
}
class User {
    -id: string
    -profile: Profile
    -swipesContainer: SwipesContainer
    -matchesContainer: MatchesContainer
    +swipe(direction: SwipeDirection, candidate: Profile): void
    +like(swipe: Swipe): void
    +getProfile(): Profile
    +getId(): string
    +equals(profile: Profile): boolean
    +getName(): string
    +updateProfile(profilePrimitives: ProfilePrimitives): void
    +toPrimitives(): UserPrimitives
    +{static} fromPrimitives(primites: UserPrimitives): User
}
enum State {
    INITIAL
    IN_APP
    SWIPPING
    PROFILE
    CONVERSATION
    MATCH_LIST
}
enum Transition {
    LOGIN
    CREATE_USER
    START_SWIPPING
    GET_PROFILE
    OPEN_CONVERSATION
    GET_MATCHES
    BACK
}
abstract class Node {
    -nodes: Map<Transition, Node>
    -name: State
    +transit(transition: Transition): Node
    +getName(): State
    #addTransition(transition: Transition, node: Node): void
    +removeBack(): void
    #addBackTransition(node: Node): void
}
class ProfileNode extends Node
class MatchListNode extends Node
class ConversationNode extends Node
class SwippingNode extends Node
class InAppNode extends Node
class InitialNode extends Node
class Navigator {
    -currentNode: Node
    +getCurrentState(): State
    +transit(transition: Transition): void
    +restart(transitions: Transition[]): void
    +logout(): void
    +back(): void
}
class Session {
    -navigator: Navigator
    -user?: User | undefined
    +login(user: User): void
    +logOut(): void
    +getUser(): User
    +getState(): State
    +transit(transition: Transition): void
    +getUserName(): string
    +isLoggedIn(): boolean
    +getProfile(): Profile
    +back(): void
}
abstract class StateController {
    #session: Session
    +back(): void
}
class ConversationStateController extends StateController
class Console {
    +clear(): void
    +readInt(question: string | string[]): number
    +readString(question: string): string
    +writeln(string?: string): void
    +write(string?: string): void
    +yesNoDialog(msg: string): boolean
}
class ConsoleView {
    #console: Console
}
abstract class StateView<T extends StateController> extends ConsoleView {
    #session: Session
    #controller: T
    +{abstract} render(): void
}
class ConversationStateView extends StateView {
    +render(): void
}
class InAppStateController extends StateController {
    +startSwipping(): void
    +getProfile(): Profile
}
abstract class Menu {
    -title: string
    -items: MenuItemType[]
    +getItems(): MenuItemType[]
    +getItem(index: number): MenuItemType
    +totalItems: number
    +getTitle(): string
    +acceptToExecute(view: IExecutableMenuView): void
}
interface IMenuItemAction {
    +execute(): void
}
abstract class MenuItem {
    -title: string
    -action: IMenuItemAction
    +execute(): void
    +getTitle(): string
    +acceptToExecute(view: IExecutableMenuView): void
}
interface IExecutableMenuView {
    +executeMenu(title: string, items: MenuItemType[]): void
    +executeMenuItem(action: IMenuItemAction): void
}
class MenuView extends ConsoleView implements IExecutableMenuView {
    -menu: Menu
    +render(): void
    +executeMenu(title: string, items: MenuItemType[]): void
    +executeMenuItem(action: IMenuItemAction): void
    -renderMenuItems(title: string, items: MenuItemType[]): void
}
class ProfileView extends ConsoleView {
    -profile: Profile
    +render(): void
}
class ProfileMenuAction extends ConsoleView implements IMenuItemAction {
    -controller: InAppStateController
    +execute(): void
}
class ProfileMenuItem extends MenuItem
class StartSwipingMenuAction implements IMenuItemAction {
    -controller: InAppStateController
    +execute(): void
}
class StartSwipingMenuItem extends MenuItem
class InAppStateMenu extends Menu
class InAppStateView extends StateView {
    +render(): void
}
class FileSystemUserPersistenceService {
    +create(user: User): void
    +find(id: string): User | null
    -parsedJson(): UserPrimitives[]
    +delete(user: User): void
    +getCandidatesProfiles(user: User): Profile[]
    +update(user: User): void
    -{static} instance: FileSystemUserPersistenceService
    +{static} getInstance(): FileSystemUserPersistenceService
}
class CreateUserController {
    -persistenceService: FileSystemUserPersistenceService
    +control(name: string, age: number, gender: string, id: string): void
}
class GetUserController {
    -persistenceService: FileSystemUserPersistenceService
    +control(id: string): User | null
}
class LoginController {
    -persistenceService: FileSystemUserPersistenceService
    +control(id: string): User | null
}
class InitialStateController extends StateController {
    -createUserController: CreateUserController
    -loginController: LoginController
    -getUserController: GetUserController
    +login(name: string): void
    +createUser(name: string, age: number, gender: string): void
}
class LoginView extends ConsoleView {
    -controller: InitialStateController
    +render(): void
}
class LoginAction extends ConsoleView implements IMenuItemAction {
    -session: Session
    -controller: InitialStateController
    +execute(): void
}
class LoginMenuItem extends MenuItem
abstract class ReactComponent<TState> extends ConsoleView {
    -eventEmiter: EventEmitter
    #state?: TState | undefined
    -mount(): void
    #setState(state: TState): void
    +{abstract} componentDidMount(): void | Promise<void>
    +{abstract} render(): void
}
class CreateUserView extends ReactComponent {
    -result?: void | { error?: any; } | undefined
    -controller: InitialStateController
    +componentDidMount(): void
    +render(): void
    -renderResult(): void
}
class CreateUserAction extends ConsoleView implements IMenuItemAction {
    -controller: InitialStateController
    +execute(): void
}
class CreateUserMenuItem extends MenuItem
class InitialStateMenu extends Menu
class InitialStateView extends StateView {
    +render(): void
}
class MatchListStateController extends StateController
class MatchListStateView extends StateView {
    +render(): void
}
class DeleteProfileController {
    -user: User
    -persistenceService: FileSystemUserPersistenceService
    +control(): void
}
class EditProfileController {
    -user: User
    -persistenceService: FileSystemUserPersistenceService
    +control(profilePrimitives: ProfilePrimitives): void
}
class ProfileStateController extends StateController {
    +deleteProfile(): void
    +editProfile(name: string, age: number, gender: string): void
}
class DeleteProfileView extends ConsoleView {
    -controller: ProfileStateController
    +render(): void
}
class DeleteProfileMenuAction implements IMenuItemAction {
    -controller: ProfileStateController
    +execute(): void
}
class DeleteProfileMenuItem extends MenuItem
class BackMenuAction implements IMenuItemAction {
    -session: Session
    +execute(): void
}
class BackMenuItem extends MenuItem
class EditProfileView extends ConsoleView {
    -controller: ProfileStateController
    +render(): void
}
class EditProfileMenuAction implements IMenuItemAction {
    -controller: ProfileStateController
    +execute(): void
}
class EditProfileMenuItem extends MenuItem
class ProfileMenu extends Menu
class ProfileStateView extends StateView {
    +render(): void
}
class GetProfilesToSwipeController {
    -persistenceService: FileSystemUserPersistenceService
    +control(user: User): Profile[]
}
class SwippingController {
    -persistenceService: FileSystemUserPersistenceService
    +control(user: User, direction: SwipeDirection, candidate: Profile): void
}
class SwippingStateController extends StateController {
    -getProfilesToSwipeController: GetProfilesToSwipeController
    -swippingController: SwippingController
    +swipe(direction: SwipeDirection, candidate: Profile): void
    +getProfilesToSwipe(): Profile[]
}
class SwippingView extends ConsoleView {
    -controller: SwippingStateController
    +render(candidate: Profile): void
    -askForDirection(): SwipeDirection
}
class SwippingProfilesView extends ConsoleView {
    -controller: SwippingStateController
    +render(): void
}
class SwippingStateView extends StateView {
    +render(): void
}
class ConsoleViewFactory {
    -views: Map<State, StateView<StateController>>
    -session: Session
    +render(): void
}
class Tinder {
    -viewsFactory: ConsoleViewFactory
    -session: Session
    +render(): void
}
Match --> "1" MatchPrimitives
MatchesContainer --> "*" Match
MatchesContainer --> "1" Match
MatchesContainer --> "*" MatchPrimitives
MatchesContainer --> "1" MatchPrimitives
Profile --> "1" ProfilePrimitives
SwipePrimitives --> "1" SwipeDirection
Swipe --> "1" SwipeDirection
Swipe --> "1" Profile
Swipe --> "1" SwipePrimitives
SwipesContainer --> "*" Swipe
SwipesContainer --> "1" Swipe
SwipesContainer --> "1" SwipeDirection
SwipesContainer --> "1" Profile
SwipesContainer --> "*" SwipePrimitives
SwipesContainer --> "1" SwipePrimitives
UserPrimitives --> "1" ProfilePrimitives
UserPrimitives --> "*" SwipePrimitives
UserPrimitives --> "*" MatchPrimitives
User --> "1" Profile
User --> "1" SwipesContainer
User --> "1" MatchesContainer
User --> "1" SwipeDirection
User --> "1" Swipe
User --> "1" ProfilePrimitives
User --> "1" UserPrimitives
Node --> "1" Transition
Node --> "1" State
Navigator --> "1" Node
Navigator --> "1" State
Navigator --> "1" Transition
Session --> "1" Navigator
Session --> "1" User
Session --> "1" State
Session --> "1" Transition
Session --> "1" Profile
StateController --> "1" Session
ConsoleView --> "1" Console
StateView --> "1" Session
InAppStateController --> "1" Profile
Menu --> "1" IExecutableMenuView
MenuItem --> "1" IMenuItemAction
MenuItem --> "1" IExecutableMenuView
IExecutableMenuView --> "1" IMenuItemAction
MenuView --> "1" Menu
MenuView --> "1" IMenuItemAction
ProfileView --> "1" Profile
ProfileMenuAction --> "1" InAppStateController
StartSwipingMenuAction --> "1" InAppStateController
FileSystemUserPersistenceService --> "1" User
FileSystemUserPersistenceService --> "*" UserPrimitives
FileSystemUserPersistenceService --> "*" Profile
CreateUserController --> "1" FileSystemUserPersistenceService
GetUserController --> "1" FileSystemUserPersistenceService
GetUserController --> "1" User
LoginController --> "1" FileSystemUserPersistenceService
LoginController --> "1" User
InitialStateController --> "1" CreateUserController
InitialStateController --> "1" LoginController
InitialStateController --> "1" GetUserController
LoginView --> "1" InitialStateController
LoginAction --> "1" Session
LoginAction --> "1" InitialStateController
CreateUserView --> "1" InitialStateController
CreateUserAction --> "1" InitialStateController
DeleteProfileController --> "1" User
DeleteProfileController --> "1" FileSystemUserPersistenceService
EditProfileController --> "1" User
EditProfileController --> "1" FileSystemUserPersistenceService
EditProfileController --> "1" ProfilePrimitives
DeleteProfileView --> "1" ProfileStateController
DeleteProfileMenuAction --> "1" ProfileStateController
BackMenuAction --> "1" Session
EditProfileView --> "1" ProfileStateController
EditProfileMenuAction --> "1" ProfileStateController
GetProfilesToSwipeController --> "1" FileSystemUserPersistenceService
GetProfilesToSwipeController --> "1" User
GetProfilesToSwipeController --> "*" Profile
SwippingController --> "1" FileSystemUserPersistenceService
SwippingController --> "1" User
SwippingController --> "1" SwipeDirection
SwippingController --> "1" Profile
SwippingStateController --> "1" GetProfilesToSwipeController
SwippingStateController --> "1" SwippingController
SwippingStateController --> "1" SwipeDirection
SwippingStateController --> "1" Profile
SwippingStateController --> "*" Profile
SwippingView --> "1" SwippingStateController
SwippingView --> "1" Profile
SwippingView --> "1" SwipeDirection
SwippingProfilesView --> "1" SwippingStateController
ConsoleViewFactory --> "1" State
ConsoleViewFactory --> "1" StateView
ConsoleViewFactory --> "1" StateController
ConsoleViewFactory --> "1" Session
Tinder --> "1" ConsoleViewFactory
Tinder --> "1" Session
@enduml
